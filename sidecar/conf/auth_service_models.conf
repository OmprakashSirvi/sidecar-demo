# Request definition
# Defines the arguments for the enforcer.Enforce() call
# r.sub is the user, r.obj is the path, r.act is the method
[request_definition]
r = sub, obj, act

# Policy definition
# Defines the structure of a policy rule
# p.sub is the role, p.obj is the path, p.act is the method
[policy_definition]
p = sub, obj, act

# Role definition
# Defines the user-to-role mapping (grouping)
# g(user, role) means 'user' is a member of 'role'
[role_definition]
g = _, _

# Policy effect
# If any matching policy rule is 'allow', the final result is 'allow'
[policy_effect]
e = some(where (p.eft == allow))

[matchers]
# It checks if:
#   1. (g(r.sub, p.sub) || p.sub == "everyone"): The user EITHER has the required role OR the policy is for "everyone".
#   AND
#   2. keyMatch2(r.obj, p.obj): The requested path matches the policy's path pattern.
#   AND
#   3. (r.act == p.act || p.act == "*"): The requested method matches the policy's method (or the policy uses a wildcard).
#
m = (g(r.sub, p.sub) || p.sub == "everyone") \
    &&  keyMatch2(r.obj, p.obj) \
    && (r.act == p.act || p.act == "*")
